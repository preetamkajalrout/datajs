<!DOCTYPE html>
<html>
<head>
<title>Ideas</title>
<style type="text/css">
body {
    color: #444444;
    font-family: Calibri, Verdana;
}
.titleSpan {
    font-weight: bold;
}
.ideaBox {
    padding-top: 8px;
}
#ideasArea {
    border: 1px solid gainsboro;
    padding: 8px;
    margin-bottom: 8px;
}
#newIdeaArea {
    border: 1px solid gainsboro;
    padding: 8px;
    margin-top: 8px;
    margin-bottom: 8px;
}
button, input, textarea { font-family: Calibri, Verdana; font-size: 100%; }
</style>
</head>
<body>

<h1>Ideas</h1>
<p>
This page shows how to create / read / update / delete information from a service.
</p>

<div id="ideasArea" data-bind="template: { name: 'ideaTemplate', foreach: ideas }">
</div>

<div id="messageBar"></div>
<button id="refreshButton" data-bind="click: loadIdeas, disable: communicating">Refresh</button>

<script type="x-jquery-tmpl" id="ideaTemplate">
<div class='ideaBox'>
{{if editing}}
  <input type="text" data-bind="value: Title" size="80" /><br />
  <textarea data-bind="value: Description" cols="80" rows="4"></textarea><br />
  <button data-bind="click: saveIdea, disable: communicating">Save</button>
{{else}}
  <span class='titleSpan'>
  {{if ClosedDate}}
  <i>${Title} (closed on ${ClosedDate})</i>
  {{else}}
  ${Title} <span data-bind="click: closeIdea" style="cursor: pointer">[Close]</span>
  {{/if}}
  </span><br />${Description}<br />
  <button data-bind="click: editIdea, disable: communicating">Edit</button>
{{/if}}
<button data-bind="click: deleteIdea, disable: communicating">Delete</button>
</div>
</script>

<div id='newIdeaArea'>
<button id="addIdea" data-bind="click: addNewIdea, disable: communicating">Add New Idea</button><br />
Title:<br />
<input data-bind="value: newIdea.title" /><br />
Description:<br />
<textarea data-bind="value: newIdea.description"></textarea>
</div>

<script type="text/javascript" src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.6.1.min.js"></script>
<script type="text/javascript" src="http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js"></script>

<!-- Get this from https://github.com/SteveSanderson/knockout/downloads. -->
<script type="text/javascript" src="knockout-1.2.1.js"></script>
<script type="text/javascript" src="knockout_mapping-latest.js"></script>
<script type="text/javascript" src="datajs-1.0.0.js"></script>

<script type="text/javascript">
    // Root URI for the service.
    var serviceUri = "./IdeasService.svc/";

    // Metadata (see the metadata sample), necessary in our case to round-trip dates correctly.
    var metadata = { "version": "1.0", "dataServices": { "dataServiceVersion": "1.0", "schema": [{ "namespace": "IdeasDbModel", "entityType": [{ "name": "Category", "key": { "propertyRef": [{ "name": "CategoryID"}] }, "property": [{ "name": "CategoryID", "type": "Edm.Int32", "nullable": "false" }, { "name": "Name", "type": "Edm.String", "nullable": "false", "maxLength": "128", "fixedLength": "false", "unicode": "true" }, { "name": "CreatedDate", "type": "Edm.DateTime", "nullable": "false"}], "navigationProperty": [{ "name": "Ideas", "relationship": "IdeasDbModel.CategoryIdeas", "toRole": "Ideas", "fromRole": "Categories"}] }, { "name": "Comment", "key": { "propertyRef": [{ "name": "CommentID"}] }, "property": [{ "name": "CommentID", "type": "Edm.Int32", "nullable": "false" }, { "name": "IdeaID", "type": "Edm.Int32", "nullable": "true" }, { "name": "CreatedDate", "type": "Edm.DateTime", "nullable": "false" }, { "name": "Content", "type": "Edm.String", "nullable": "false", "maxLength": "2048", "fixedLength": "false", "unicode": "true"}], "navigationProperty": [{ "name": "Idea", "relationship": "IdeasDbModel.FK__Comments__IdeaID__108B795B", "toRole": "Ideas", "fromRole": "Comments"}] }, { "name": "Idea", "key": { "propertyRef": [{ "name": "IdeaID"}] }, "property": [{ "name": "IdeaID", "type": "Edm.Int32", "nullable": "false" }, { "name": "Title", "type": "Edm.String", "nullable": "false", "maxLength": "128", "fixedLength": "false", "unicode": "true" }, { "name": "Description", "type": "Edm.String", "nullable": "false", "maxLength": "1024", "fixedLength": "false", "unicode": "true" }, { "name": "CreatedDate", "type": "Edm.DateTime", "nullable": "false" }, { "name": "ClosedDate", "type": "Edm.DateTime", "nullable": "true"}], "navigationProperty": [{ "name": "Comments", "relationship": "IdeasDbModel.FK__Comments__IdeaID__108B795B", "toRole": "Comments", "fromRole": "Ideas" }, { "name": "Categories", "relationship": "IdeasDbModel.CategoryIdeas", "toRole": "Categories", "fromRole": "Ideas"}]}], "association": [{ "name": "FK__Comments__IdeaID__108B795B", "end": [{ "type": "IdeasDbModel.Idea", "role": "Ideas", "multiplicity": "0..1" }, { "type": "IdeasDbModel.Comment", "role": "Comments", "multiplicity": "*"}], "referentialConstraint": { "principal": { "role": "Ideas", "propertyRef": [{ "name": "IdeaID"}] }, "dependent": { "role": "Comments", "propertyRef": [{ "name": "IdeaID"}]}} }, { "name": "CategoryIdeas", "end": [{ "type": "IdeasDbModel.Category", "role": "Categories", "multiplicity": "*" }, { "type": "IdeasDbModel.Idea", "role": "Ideas", "multiplicity": "*"}]}] }, { "namespace": "SimpleService", "entityContainer": [{ "name": "IdeasDbEntities", "isDefaultEntityContainer": "true", "entitySet": [{ "name": "Categories", "entityType": "IdeasDbModel.Category" }, { "name": "Comments", "entityType": "IdeasDbModel.Comment" }, { "name": "Ideas", "entityType": "IdeasDbModel.Idea"}], "associationSet": [{ "name": "FK__Comments__IdeaID__108B795B", "association": "IdeasDbModel.FK__Comments__IdeaID__108B795B", "end": [{ "role": "Ideas", "entitySet": "Ideas" }, { "role": "Comments", "entitySet": "Comments"}] }, { "name": "CategoryIdeas", "association": "IdeasDbModel.CategoryIdeas", "end": [{ "role": "Categories", "entitySet": "Categories" }, { "role": "Ideas", "entitySet": "Ideas"}]}]}]}]} };
    OData.defaultMetadata.push(metadata);

    // This is what our view model looks like.
    var ideasViewModelFn = function () {
        var that = this;

        // The list of ideas we are editing.
        this.ideas = ko.observableArray([]);

        // A placeholder for a new idea to be added.
        this.newIdea = {
            title: ko.observable("New Idea"),
            description: ko.observable("Short idea description")
        };

        // A flag indicating whether we are communicating with the server.
        this.communicating = ko.observable(false);

        // Adds the newIdea placeholder to the list and saves to the server.
        this.addNewIdea = function () {
            var request = {
                requestUri: serviceUri + "Ideas",
                method: "POST",
                data: { Title: that.newIdea.title(), Description: that.newIdea.description() }
            };
            makeRequest(request, function (newItem) {
                that.newIdea.title("New Idea");
                that.newIdea.description("Short idea description");
                that.ideas.push(ideaModelToViewModel(newItem));
            });
        };

        // Discards all ideas and reloads them from the server.
        this.loadIdeas = function () {
            makeRequest({ requestUri: serviceUri + "Ideas" }, function (data) {
                that.ideas().splice(0, ideasViewModel.ideas().length);

                $.each(data.results, function (index, value) {
                    that.ideas.push(ideaModelToViewModel(value));
                });
            });
        };
    };

    var ideasViewModel = new ideasViewModelFn();

    // Map from a server model object to a view model with functions and flags.
    var ideaModelToViewModel = function (model) {
        // Deletes this idea from the server and removes it from the view model.
        model.deleteIdea = function () {
            var that = this;
            var request = {
                requestUri: that.__metadata.uri(),
                method: "DELETE"
            };
            makeRequest(request, function (data) {
                ideasViewModel.ideas.remove(that);
            });
        };

        // Start editing an idea.
        model.editIdea = function () {
            this.editing(true);
        };

        // Save the changes to the idea.
        model.saveIdea = function() {
            var that = this;
            var data = ideaViewModelToModel(that);
            var request = {
                requestUri: data.__metadata.uri,
                method: "PUT",
                data: data
            };
            makeRequest(request, function (data) {
                that.editing(false);
            });
        };

        // Set a closed date on the idea.
        model.closeIdea = function () {
            this.ClosedDate(new Date());
            this.saveIdea();
        };

        model.editing = false;

        var result = ko.mapping.fromJS(model);

        // Propagate the 'communicate' to simplify binding.
        result.communicating = ko.dependentObservable(function () {
            return ideasViewModel.communicating();
        }, ideasViewModel);

        return result;
    };

    // Map from a view model back to a server object.
    var ideaViewModelToModel = function (viewModel) {
        var result = ko.mapping.toJS(viewModel);
        delete result.editing;
        return result;
    };

    // Make a request, setting the 'communicating' flag.
    var makeRequest = function (request, success) {
        ideasViewModel.communicating(true);
        $("#messageBar").text("Contacting server...").show();
        return OData.request(request, function (data) {
            ideasViewModel.communicating(false);
            $("#messageBar").hide();
            success(data);
        }, function (err) {
            ideasViewModel.communicating(false);
            $("#messageBar").text("Error while contacting server: " + err.message + " - " + JSON.stringify(err));
        });
    };

    // Bind the model to everything in the document that needs it.
    ko.applyBindings(ideasViewModel);

    // Start loading ideas asynchronously.
    ideasViewModel.loadIdeas();

</script>
</body>
</html>
