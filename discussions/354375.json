[
  {
    "Id": "831537",
    "ThreadId": "354375",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I was reading several other discussions which are touching on my issue but do not quite fit my problem. To sum things up here are my issues before I get into the details:<br>\r\n1) I do not know if I can skip the Date parsing done by data.js for a OData.read call to retrieve the &quot;raw date&quot; format sent by the server<br>\r\n2) I am not aware of a lib / datajs-property which lets me feed the OData.request with the formatted date and send the &quot;raw date&quot; format back to the server</p>\r\n<p>Before starting to write my own parsers it would be great to know if there is a better standard way of doing things. Thanks in advance.</p>\r\n<p>My goal is to read Dates with an OData service, make them nicely readable in the browser, then to manipulate them and update them with a PUT request. The raw date format (before conversions by data.js) is as follows:\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>2012-04-30T11:15:59\r\ni.e.\r\n2012-04-30T11:15:59Z <br></pre>\r\n</div>\r\ndata.js converts this string to\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Mon Apr 30 2012 13:15:59 GMT&#43;0200 (CEST)\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>This is done in the methods </p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> parseDateTime = <span style=\"color:blue\">function</span> (propertyValue) {...}\r\ni.e.\r\n<span style=\"color:blue\">var</span> parseDateTimeMaybeOffset = <span style=\"color:blue\">function</span> (value, withOffset) {...}\r\n</pre>\r\n</div>\r\nTo the user I would like to present it this way (which works with chrome, but not Safari)\r\n<p></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Monday, April 30, 2012, 13:15:59\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>I am able to do this in chrome by using the functions ot the javascript Date object I created with new Date();. However, in Safari it does not work which is due to the source format of the date. Safari can only handle the &quot;raw date&quot; format, chrome is a bit\r\n more tolerant I guess.</p>\r\n<p>Additionally, I need to convert the nicely readable date format into the &quot;raw format&quot; again before passing it to the PUT request. Currently I am doing this by hand but am sure there is a better way. I also saw the odata.jsonHandler.recognizeDates property\r\n but since I use the atom&#43;xml format this does not apply I guess.</p>\r\n<p>Any pointers would be great.</p>\r\n<p>Best regards,<br>\r\nJan</p>\r\n",
    "PostedDate": "2012-05-03T03:23:43.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "831909",
    "ThreadId": "354375",
    "Html": "<p>Hi Jan,</p>\r\n<p>&nbsp;&nbsp;&nbsp; DataJS parses the date strings in the OData payload and converts them into Javascript Date objects.&nbsp; How the data object is displayed as a string then is browser and javascript engine specific (depending on how they implemented the Date.toString() method) and we don't have any control over that.&nbsp; Now, regarding your two questions above:</p>\r\n<p>&nbsp;&nbsp;&nbsp; 1.&nbsp;Yes, when using JSON for talking with the OData endpoint... by default, datajs will not try to convert date literal&nbsp;values in the JSON payload if it you don't pass a metdata object to OData.read / OData.request. This is because there is no way to determine that the value is actually a date and not a string that happens to be formatted as date..&nbsp; There is a flag to turn on the interpretation of date literals into javascript Date objects.</p>\r\n<p>&nbsp;&nbsp;&nbsp; 2. If in your request the property is a Date object, then datajs will serialize into a string following the ISO date format before sending the request to the server.&nbsp; If the property&nbsp;happens to be a string value then the value will fly&nbsp;back to the server as&nbsp;string (there are some&nbsp;other things to keep in mind&nbsp;if you are passing a metadata object into datajs.... but I don't think it is the case here).</p>\r\n<p>&nbsp;&nbsp;&nbsp;Based on your scenario, what you are facing is a data presentation problem, not a data problem itself.. I would not worry too much about converting the dates back and forth from a format that OData likes... that's what datajs is for..&nbsp; Your concern should be how to display the data in a homogenous way to the user.&nbsp; There is a librarly called date.js&nbsp; that seems to ease the pain of working with javascript date objects in different browsers..&nbsp; It might help you here..&nbsp; But what I would do is once I get the data back form datajs as a Date object then just have a function in your UI layer that displays the date object as you like .. you might even want to override the Date.toString() method to do so.&nbsp;</p>\r\n<p>Regards,</p>\r\n<p>Alex Trigo.</p>",
    "PostedDate": "2012-05-03T14:43:47.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]