[
  {
    "Id": "1048079",
    "ThreadId": "444840",
    "Html": "Hi \r<br />\nI am calling odata using MVC4 with entitysetcontroller and in firefox returned data is always undefined but in other browser it is working fine\r<br />\n<br />\nOData.defaultHttpClient.enableJsonpCallback = true;<br />\n<pre><code>        DefaultHandler();\n        OData.read(\n                        {\n                            requestUri: &quot;http://xxxxxxxxxx/odata/Company&quot;,\n                            enableJsonpCallback: false,                             \n                            datatype: &quot;json&quot;,\n                            headers:\n                             { \n                             'Access-Control-Allow-Origin': '*', \n                             'Access-Control-Allow-Methods': 'GET',\n                             'Content-Type': 'application/json', \n                             'Accept': 'text/html'                                 \n                             },\n                            method: &quot;GET&quot;\n                        },\n                        successOdata,\n                        errorOdata\n                    );</code></pre>\n\nsuccessOdata = function (data, response) {\r<br />\n//here data is undefined in firefox but in other browser it is fine working fine in phonegap and other devices\r<br />\n};\r<br />\n<br />\nCan anyone suggest where is an issue?<br />\n",
    "PostedDate": "2013-05-23T23:09:18.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1048416",
    "ThreadId": "444840",
    "Html": "Hi shyamvashista12,\r<br />\n<br />\nIn the code that you posted you set OData.defaultHttpClient.enableJsonpCallback = true; which is correct to solve the same-origin policy issue on the browsers,\r<br />\nbut in the request:<br />\n<pre><code>                            OData.read(\n                            {\n                            requestUri: &quot;http://xxxxxxxxxx/odata/Company&quot;,\n                            enableJsonpCallback: false,                            \n                            datatype: &quot;json&quot;,\n                            ......\n</code></pre>\n\nyou set the value of enableJsonpCallback: false which overrides the value in OData.defaultHttpClient.enableJsonpCallback, so FF will not be able to get the response as the request needs to have jsonp enabled.\r<br />\n<br />\n<br />\nRegards,\r<br />\nHussein<br />\n",
    "PostedDate": "2013-05-24T12:56:54.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1048994",
    "ThreadId": "444840",
    "Html": "Hi Hussein\r<br />\nThanks for reply\r<br />\nBut When I am setting enableJsonpCallback: true, Call is not going to server, every time it is returning error message in response.\r<br />\nWhen overriding the enableJsonpCallback: false, Call is going to server and return data in response.\r<br />\nEven in other browser it is working fine with enableJsonpCallback: false with cross browses.\r<br />\n<br />\nI am using DefaultHandler(); before sending request \r<br />\nfunction DefaultHandler() {<br />\n<pre><code>        var oldDefaultHandler = OData.defaultHandler;\n        OData.defaultHandler = {\n            accept: oldDefaultHandler.accept,\n            read: function (response, context) {                \n                var contentType = response.headers[&quot;Content-Type&quot;];\n                if (contentType &amp;&amp; contentType.indexOf(&quot;text/html&quot;) === 0) {\n                    response.data = response.body;\n                } else {\n                    oldDefaultHandler.read(response, context);\n                }\n            },\n            write: function (request, context) {\n                oldDefaultHandler.write(request, context);\n            }\n        };\n    }  \n</code></pre>\n\nStill not getting where what is wrong with FF 21?<br />\n",
    "PostedDate": "2013-05-26T22:57:40.973-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1049709",
    "ThreadId": "444840",
    "Html": "In order to understand the issue can you please answer these questions:<br />\n<ul>\n<li>What version of DataJS are you using ? </li>\n<li>Do you have the code for the service ? if so, is JsonP enabled in the service ?</li>\n<li>\nCan you please post the request/response headers for the request ?<br />\n</li>\n</ul>\n",
    "PostedDate": "2013-05-28T09:45:54.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1049905",
    "ThreadId": "444840",
    "Html": "Hi <br />\nI am using <br />\ndatajs-1.1.1beta.js<br />\nYes I have that code and JsonP is enabled in the service and also using crossbrowserhandler class<br />\npublic class CrossBrowserHandler : DelegatingHandler<br />\n<pre><code>{ \n    const string Origin = &quot;Origin&quot;;\n    const string AccessControlRequestMethod = &quot;Access-Control-Request-Method&quot;;\n    const string AccessControlRequestHeaders = &quot;Access-Control-Request-Headers&quot;;\n    const string AccessControlAllowOrigin = &quot;Access-Control-Allow-Origin&quot;;\n    const string AccessControlAllowMethods = &quot;Access-Control-Allow-Methods&quot;;\n    const string AccessControlAllowHeaders = &quot;Access-Control-Allow-Headers&quot;;\n\n    protected override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        try\n        {               \n            bool isCorsRequest = request.Headers.Contains(Origin);\n            bool isPreflightRequest = request.Method == HttpMethod.Options;\n            if (isCorsRequest)\n            {\n                if (isPreflightRequest)\n                {\n                    return Task.Factory.StartNew&lt;HttpResponseMessage&gt;(() =&gt;\n                    {\n                        HttpResponseMessage response = new HttpResponseMessage();\n                        response.Headers.Add(AccessControlAllowOrigin, request.Headers.GetValues(Origin).First());\n\n                        string accessControlRequestMethod = request.Headers.GetValues(AccessControlRequestMethod).FirstOrDefault();\n                        if (accessControlRequestMethod != null)\n                        {\n                            response.Headers.Add(AccessControlAllowMethods, accessControlRequestMethod);\n                        }\n\n                        string requestedHeaders = string.Join(&quot;, &quot;, request.Headers.GetValues(AccessControlRequestHeaders));\n                        if (!string.IsNullOrEmpty(requestedHeaders))\n                        {\n                            response.Headers.Add(AccessControlAllowHeaders, requestedHeaders);\n                        }\n\n                        return response;\n                    }, cancellationToken);\n                }\n                else\n                {\n\n                    return base.SendAsync(request, cancellationToken).ContinueWith&lt;HttpResponseMessage&gt;(t =&gt;\n                    {\n                        HttpResponseMessage resp = t.Result;\n                        resp.Headers.Add(AccessControlAllowOrigin, request.Headers.GetValues(Origin).First());\n                        return resp;\n                    });\n                }\n            }\n            else\n            {\n                return base.SendAsync(request, cancellationToken);\n            }\n        }\n        catch (Exception ex)\n        {\n\n            return Task&lt;HttpResponseMessage&gt;.Factory.StartNew(() =&gt;\n            {\n                return new HttpResponseMessage(HttpStatusCode.InternalServerError)\n                {\n                    Content = new StringContent(&quot;Error encountered in browser handling.&quot;)\n                };\n            });\n        }\n    }\n} </code></pre>\n\n<hr />\n<strong>Request before Crossbrowser handing</strong><br />\n<br />\n{Method: OPTIONS, RequestUri: '<a href=\"http://xxxxxxxxxxxxx/odata/Company?$top=10', Version: 1.1\" rel=\"nofollow\">http://xxxxxxxxxxxxx/odata/Company?$top=10', Version: 1.1</a>, Content: System.Net.Http.StreamContent, Headers:<br />\n{<br />\n  Connection: keep-alive<br />\n  Accept: text/html<br />\n  Accept: application/xhtml+xml<br />\n  Accept: application/xml; q=0.9<br />\n  Accept: <em>/</em>; q=0.8<br />\n  Accept-Encoding: gzip<br />\n  Accept-Encoding: deflate<br />\n  Accept-Language: en-us<br />\n  Accept-Language: en; q=0.5<br />\n  Host: xxxxxxxxxxxxxxxx<br />\n  User-Agent: Mozilla/5.0<br />\n  User-Agent: (Windows NT 6.1; rv:12.0)<br />\n  User-Agent: Gecko/20100101<br />\n  User-Agent: Firefox/12.0<br />\n  Origin: http://xxxxxxxxxxxxx<br />\n  Access-Control-Request-Method: GET<br />\n  Access-Control-Request-Headers: access-control-allow-methods,access-control-allow-origin,authorization-token,content-type,maxdataserviceversion<br />\n<h2>}}</h2>\n<strong>Request after Crossbrowser handing</strong><br />\n<br />\n{Method: GET, RequestUri: '<a href=\"http://xxxxxxxxxxxxx/odata/Company?$top=10', Version: 1.1\" rel=\"nofollow\">http://xxxxxxxxxxxxx/odata/Company?$top=10', Version: 1.1</a>, Content: System.Net.Http.StreamContent, Headers:<br />\n{<br />\n  Connection: keep-alive<br />\n  Accept: text/html<br />\n  Accept-Encoding: gzip<br />\n  Accept-Encoding: deflate<br />\n  Accept-Language: en-us<br />\n  Accept-Language: en; q=0.5<br />\n  Host: localhost:61575<br />\n  Referer: <a href=\"http://xxxxxxxxxxx/WebApiClient/Test.aspx\" rel=\"nofollow\">http://xxxxxxxxxxx/WebApiClient/Test.aspx</a><br />\n  User-Agent: Mozilla/5.0<br />\n  User-Agent: (Windows NT 6.1; rv:12.0)<br />\n  User-Agent: Gecko/20100101<br />\n  User-Agent: Firefox/12.0<br />\n  Access-Control-Allow-Origin: *<br />\n  Access-Control-Allow-Methods: GET<br />\n  Authorization-Token: 94,214,182,1,98,51,181,18,190,167,152,19<br />\n  MaxDataServiceVersion: 1.0<br />\n  Origin: http://xxxxxxxxxxxxxxx<br />\n  Content-Type: application/json<br />\n<h2>}}</h2>\n<strong>Response</strong> <br />\n<br />\n<br />\n{StatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.ObjectContent<code>1[[System.Linq.IQueryable</code>1[[WebApi.Dto.CompDto, WebApi.Dto, Version=1.0.0.0, Culture=neutral, <br />\n<br />\nPublicKeyToken=null]], System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Headers:<br />\n{<br />\n  Access-Control-Allow-Origin: <a href=\"http://xxxxxxxxxx\n  Content-Type: application/json; charset=utf-8\n  DataServiceVersion: 1.0\" rel=\"nofollow\">http://xxxxxxxxxx\n  Content-Type: application/json; charset=utf-8\n  DataServiceVersion: 1.0</a><br />\n}}<br />\n",
    "PostedDate": "2013-05-28T22:04:27.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1050839",
    "ThreadId": "444840",
    "Html": "There are two things that happen here:\r<br />\n<br />\nWhen setting enableJsonPCallback on the request, \r<br />\nthe request should be something like \r<br />\n<a href=\"http://xxxxxxxxxxxxx/odata/Company?$top=10'?$callback=parent.handleJSONP_0&amp;$format=json\" rel=\"nofollow\">http://xxxxxxxxxxxxx/odata/Company?$top=10'?$callback=parent.handleJSONP_0&$format=json</a>\r<br />\n<br />\nand the response should start with \r<br />\nparent.handleJSONP_0({ [response data]})\r<br />\n<br />\nAlso In the headers you are setting MaxDataServiceVersion: 1.0, and this will not work, you need to set MaxDataServiceVersion to 3.0.\r<br />\n<br />\nIn order to know whether the problem is from Datajs or from the service, you can try your request in the browser and add this \r<br />\n &quot;?$callback=parent.handleJSONP_0&amp;$format=json&quot; as query options in the request.\r<br />\n If the response is as expected and contains parent.handleJSONP_0({ [response data]}), then the service is fine and the problem is in the request datajs makes, other than that, the problem will be from the service support to Jsop\r<br />\n<br />\nCan you try that and let me know the result ?<br />\n",
    "PostedDate": "2013-05-30T13:15:46.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]