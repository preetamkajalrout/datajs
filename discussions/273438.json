[
  {
    "Id": "675165",
    "ThreadId": "273438",
    "Html": "\r\n<p>I am trying to read a specific property of an entity with XML format, similar to this url:</p>\r\n<p><a href=\"http://services.odata.org/OData/OData.svc/Categories(1)/Name\">http://services.odata.org/OData/OData.svc/Categories(1)/Name</a></p>\r\n<p>With the latest datajs 1.0.1, I get a &quot;no handler for data&quot; error. &nbsp;I've debugged into datajs and the problem is at the dispatchHandler() function (line 4617 of datajs 1.0.1).</p>\r\n<p>The dispatchHandler function looks through an array of handlers, trying to find a handler that will be able to handle the response. &nbsp;The content-type of the url above (<a href=\"http://services.odata.org/OData/OData.svc/Categories(1)/Name\">http://services.odata.org/OData/OData.svc/Categories(1)/Name</a>)\r\n is application/xml. &nbsp;However, neither the atom handler nor the xml handler of datajs recognizes the element name (in the case of the url given, it is &quot;Name&quot;). &nbsp;In the case of the atom handler, it only seems to recognize &quot;feed&quot; and &quot;entry&quot; (at function\r\n readAtomDocument(), line 2381 of datajs). &nbsp;In the case of the xml handler, it&nbsp;only recognize &quot;links&quot; and &quot;uri&quot; (you can see this code at the function readODataXmlDocument(), line 2021 of datajs).</p>\r\n<p>&nbsp;</p>\r\n<p>If I request the url in json format, however, everything works correctly. &nbsp;It's only XML that trips up datajs.</p>\r\n<p>&nbsp;</p>\r\n<p>Is this a bug on datajs's part? &nbsp;Or is this kind of operation not supported by datajs?&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-09-22T02:22:42.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "675177",
    "ThreadId": "273438",
    "Html": "<p>It appears DELETE and PUT operations that results in 204 No Content gives the same \"no handler for data\" error. &nbsp;I suspect it is the same issue. &nbsp;Is this something datajs will fix?</p>",
    "PostedDate": "2011-09-22T02:43:30.913-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "675453",
    "ThreadId": "273438",
    "Html": "<p>Hi Jonathan,</p>\r\n<p>&nbsp;&nbsp;&nbsp; Hope you are doing great.&nbsp; Indeed, reading and updating individual properties using the XML format is a feature we didn't include in the first version of datajs.&nbsp;&nbsp; For now, the library only supports reading individual properties' raw value&nbsp;(<a href=\"http://services.odata.org/OData/OData.svc/Categories(1)/Name\">http://services.odata.org/OData/OData.svc/Categories(1)/Name/$value</a>).&nbsp; We&nbsp;will consider adding&nbsp;support for&nbsp;this feature&nbsp;in the next version&nbsp;of the library.&nbsp; For the time being, you can easily work&nbsp;around this limitation and update individual properties&nbsp;using a custom handler of your own.&nbsp; For example, the following snippet will allow you&nbsp;to update&nbsp;an individual property raw value:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>OData.request({\r\n        requestUri: <span style=\"color: #a31515;\">\"http://services.odata.org/OData/OData.svc/Categories(1)/Name/$value\"</span>,\r\n        method: <span style=\"color: #a31515;\">\"PUT\"</span>,\r\n        headers: { <span style=\"color: #a31515;\">\"Content-Type\"</span>: <span style=\"color: #a31515;\">\"text/plain\"</span> },\r\n        data: <span style=\"color: #a31515;\">\"A new name\"</span>\r\n    }, <span style=\"color: blue;\">function</span> success(data, response) {\r\n        alert(<span style=\"color: #a31515;\">\"response code: \"</span> + response.statusCode);\r\n    }, <span style=\"color: blue;\">function</span> errorr(err) {\r\n        alert(err);\r\n    }, {\r\n        write: <span style=\"color: blue;\">function</span> (request) {\r\n            <span style=\"color: blue;\">if</span> (request.data) {\r\n                request.body = request.data.toString();\r\n            }\r\n        }\r\n    });\r\n</pre>\r\n</div>\r\n<p>&nbsp;And later read the updated&nbsp;value again:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OData.read(<span style=\"color: #a31515;\">\"http://services.odata.org/OData/OData.svc/Categories(1)/Name/$value\"</span>, <span style=\"color: blue;\">function</span> (data) { alert(data); });</p>\r\n<p>Regards,</p>\r\n<p>Alex Trigo.</p>",
    "PostedDate": "2011-09-22T11:54:15.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "676298",
    "ThreadId": "273438",
    "Html": "<p>Hi ATrigo, thanks for the workaround.&nbsp; However, I really needed the XML to work because I am auto testing my OData service implementation using datajs.&nbsp; I want to make sure the XML format being returned is correct.</p>\r\n<p>The PUT/DELETE problem was easier to fix, what I would do is the following and it works well (in case anyone else ever encounters the same problem):</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> deleteRequest = {\r\n    method: <span style=\"color: #a31515;\">\"DELETE\"</span>,\r\n    requestUri: <span style=\"color: #a31515;\">\"http://myservice/entity\"</span>\r\n};\r\n\r\nOData.request(deleteRequest, undefined, <span style=\"color: blue;\">function</span>(err){\r\n    <span style=\"color: blue;\">if</span> (err.response.statusCode == 204 &amp;&amp;\r\n        err.response.body == <span style=\"color: #a31515;\">\"\"</span>){\r\n         <span style=\"color: green;\">//SUCCESS!</span>\r\n    }\r\n    <span style=\"color: blue;\">else</span> {\r\n        <span style=\"color: green;\">//ERROR!</span>\r\n    }\r\n});\r\n</pre>\r\n</div>\r\n<p>Read the specific property with XML was harder.&nbsp; I looked at how the Atom handler parsed the individual properties under the &lt;m:properties&gt; element and copied it to do the same for the XML handler.&nbsp; Here is the modification I did:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">var</span> readODataXmlDocument = <span style=\"color: blue;\">function</span> (xmlRoot) {\r\n        <span style=\"color: green;\">/// &lt;summary&gt;Reads an OData link(s) producing an object model in return.&lt;/summary&gt;</span>\r\n        <span style=\"color: green;\">/// &lt;param name=\"xmlRoot\"&gt;Top-level element to read.&lt;/param&gt;</span>\r\n        <span style=\"color: green;\">/// &lt;returns type=\"Object\"&gt;The object model representing the specified element.&lt;/returns&gt;</span>\r\n\r\n        <span style=\"color: blue;\">if</span> (xmlRoot.nsURI === odataXmlNs) {\r\n            <span style=\"color: blue;\">switch</span> (xmlRoot.localName) {\r\n                <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">\"links\"</span>:\r\n                    <span style=\"color: blue;\">return</span> readLinks(xmlRoot);\r\n                <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">\"uri\"</span>:\r\n                    <span style=\"color: blue;\">return</span> readUri(xmlRoot);\r\n            }\r\n            <span style=\"color: blue;\">return</span> readXmlProperty(xmlRoot);  <span style=\"color: green;\">//my modification</span>\r\n        }\r\n        <span style=\"color: blue;\">return</span> undefined;\r\n    };\r\n\r\n    <span style=\"color: blue;\">var</span> readXmlProperty = <span style=\"color: blue;\">function</span> (property) {\r\n        <span style=\"color: green;\">//I copied the implementation of this newly created function</span>\r\n        <span style=\"color: green;\">//from readAtomEntryProperty()</span>\r\n        <span style=\"color: blue;\">var</span> result = {};\r\n        <span style=\"color: blue;\">var</span> propertyNullValue = <span style=\"color: blue;\">null</span>;\r\n        <span style=\"color: blue;\">var</span> propertyTypeValue = <span style=\"color: #a31515;\">\"Edm.String\"</span>;\r\n        <span style=\"color: blue;\">var</span> propertyExtensions = [];\r\n\r\n        xmlAttributes(property, <span style=\"color: blue;\">function</span> (attribute) {\r\n            <span style=\"color: blue;\">if</span> (attribute.nsURI === odataMetaXmlNs) {\r\n                <span style=\"color: blue;\">switch</span> (attribute.localName) {\r\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">\"null\"</span>:\r\n                        propertyNullValue = attribute.domNode.nodeValue;\r\n                        <span style=\"color: blue;\">return</span>;\r\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">\"type\"</span>:\r\n                        propertyTypeValue = attribute.domNode.nodeValue;\r\n                        <span style=\"color: blue;\">return</span>;\r\n                };\r\n            }\r\n\r\n            <span style=\"color: blue;\">if</span> (isExtensionNs(attribute.nsURI)) {\r\n                <span style=\"color: blue;\">var</span> extension = readAtomExtensionAttribute(attribute);\r\n                propertyExtensions.push(extension);\r\n            }\r\n        });\r\n\r\n        <span style=\"color: blue;\">var</span> propertyValue = <span style=\"color: blue;\">null</span>;\r\n        <span style=\"color: blue;\">var</span> propertyMetadata = {\r\n            type: propertyTypeValue,\r\n            extensions: propertyExtensions\r\n        };\r\n\r\n        <span style=\"color: blue;\">if</span> (propertyNullValue !== <span style=\"color: #a31515;\">\"true\"</span>) {\r\n            propertyValue = xmlInnerText(property.domNode);\r\n            <span style=\"color: blue;\">if</span> (isPrimitiveType(propertyTypeValue)) {\r\n                propertyValue = convertFromAtomPropertyText(propertyValue, propertyTypeValue);\r\n            } <span style=\"color: blue;\">else</span> {\r\n                <span style=\"color: green;\">// Probe for a complex type and read it.</span>\r\n                <span style=\"color: blue;\">if</span> (xmlFirstElement(property)) {\r\n                    propertyValue = { __metadata: { type: propertyTypeValue} };\r\n                    readAtomEntryStructuralObject(property, propertyValue, propertyMetadata);\r\n                }\r\n            }\r\n        }\r\n\r\n        result[property.localName] = propertyValue;\r\n\r\n        <span style=\"color: blue;\">return</span> result;\r\n    };\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>What I did was instead of returning undefined when the XML root was neither \"links\" or \"uri\", I would treat the document as a specific xml property of an entity.&nbsp; Seeing how the JSON handler does not seem to care what the type of the entity&nbsp;that the specific property belongs to is, I reasoned it would be ok to not care what the type of the entity of the XML specific property would be either.&nbsp; The readXmlProperty function was a new function I created and mostly a copy and paste from the readAtomEntryProperty() function.</p>\r\n<p>I tested it briefly and it seems to work ok.&nbsp; If there are&nbsp;any problems with&nbsp;my implementation please feel free to let me know.&nbsp; For now it'll serve as my quick hack to get this to work before you guys officially support reading specific properties in XML format.&nbsp;</p>",
    "PostedDate": "2011-09-25T03:02:34.623-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]