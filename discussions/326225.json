[
  {
    "Id": "778715",
    "ThreadId": "326225",
    "Html": "\r\n<p>Hi guys,</p>\r\n<p>I have wcf odata service protected by basic authentication sitting on a domain different then my web application. &nbsp;I have username and password and it's part of the request already.</p>\r\n<p>OData.defaultHttpClient.enableJsonpCallback = true;<br>\r\nOData.read({ requestUri: 'http://mydomain.com/MyService.svc/Project(166)', user: 'myuser', password: 'mypwd'},<br>\r\nfunction(data){ <br>\r\n<span style=\"white-space:pre\"></span>// ok, process data<br>\r\n},<br>\r\nfunction(error){ <br>\r\n<span style=\"white-space:pre\"></span>// process error<br>\r\n});</p>\r\n<p>Based on fiddler, the first request goes without Authorization token, only the second request has it.</p>\r\n<p>How can I suppress default browser login dialog?</p>\r\n<p>Thanks</p>\r\n",
    "PostedDate": "2012-02-19T00:00:01.46-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "792463",
    "ThreadId": "326225",
    "Html": "<p>Hi Dan,</p>\r\n<p>&nbsp;&nbsp; Authentication is not supported by JSONP because in the end it is made up of a bunch of GET requests using &lt;script&gt; tags ... hence there is no place to send user and password data.&nbsp;&nbsp; That's why you see in fiddler that the first request doesn't have an authorization token with it...&nbsp;&nbsp; For what you mention about supressing the browsers' loding dialog, i don't thik you can do that from within javascript.. that dialog is generated by the browser itself and completely unaccessible to the javascript sandbox....</p>\r\n<p>&nbsp;&nbsp;&nbsp;If you want to avoid this behavior (which is due to the browser's same origin policy), you will probably want to use a proxy that is in the domain of the web app and have it relay the request with the authentication info to the desired endpoint.</p>\r\n<p>Regards,</p>\r\n<p>Alex Trigo.</p>",
    "PostedDate": "2012-02-21T17:10:41.283-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]