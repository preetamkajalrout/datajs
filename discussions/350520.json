[
  {
    "Id": "817302",
    "ThreadId": "350520",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm successfully using DataJS caching when calling multi-item OData queries in my app. &nbsp;However, I'm facing problems when calling OData queries which use object indices. &nbsp;Here's what I mean:</p>\r\n<p><span>&nbsp;</span><span style=\"white-space:pre\"> </span>code: &nbsp;cache.readRange(0, 1).then(successHandler, failHandler);</p>\r\n<p><span style=\"white-space:pre\"></span>results: &nbsp;GET http://localhost/service/gw/CONTACTDETAIL/CONTACTCollection(0000000063)?<span style=\"color:#ff0000\">$skip=0&amp;$top=50</span>&nbsp;400 (Bad Request)</p>\r\n<p>As you can see, DataJS is adding the $skip and $top query parameters to the call (for paging, presumably). &nbsp;However, these query parameters are incompatible with the collection index (0000000063) syntax apparently.</p>\r\n<p>Is there any way to prevent DataJS from adding these query parameters? Also, is there any way to get readRange() to return all results instead of having to specify paging parameters?</p>\r\n<p>Thanks,</p>\r\n<p>Dave</p>\r\n",
    "PostedDate": "2012-03-29T10:53:47.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "817992",
    "ThreadId": "350520",
    "Html": "<p>Hi Dave,&nbsp;</p>\n<p>&nbsp;&nbsp; The cache out of the box uses a very simple data provider that&nbsp;assumes the uri used always point to an entity collection.. thus it always adds $skip and $top query parameters.&nbsp; To&nbsp;change this behavior, you can&nbsp;specify your own custom&nbsp;data source object&nbsp;for the cache.&nbsp; In order to do this, you have to first create an object that has the following&nbsp;contract:</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">var</span> myDataSource = {\r\n    count : <span style=\"color: blue;\">function</span> (success, error) {\r\n            <span style=\"color: green;\">/// &lt;summary&gt;Gets the number of items in the collection.&lt;/summary&gt;</span>\r\n            <span style=\"color: green;\">/// &lt;param name=\"success\" type=\"Function\"&gt;Success callback with the item count.&lt;/param&gt;</span>\r\n            <span style=\"color: green;\">/// &lt;param name=\"error\" type=\"Function\"&gt;Error callback.&lt;/param&gt;</span>\r\n            <span style=\"color: green;\">/// &lt;returns type=\"Object\"&gt;Request object with an abort method./&lt;param&gt;</span>\r\n    },\r\n\r\n    read : <span style=\"color: blue;\">function</span> (index, count, success, error) {\r\n            <span style=\"color: green;\">/// &lt;summary&gt;Gets a number of consecutive items from the collection.&lt;/summary&gt;</span>\r\n            <span style=\"color: green;\">/// &lt;param name=\"index\" type=\"Number\"&gt;Zero-based index of the items to retrieve.&lt;/param&gt;</span>\r\n            <span style=\"color: green;\">/// &lt;param name=\"count\" type=\"Number\"&gt;Number of items to retrieve.&lt;/param&gt;</span>\r\n            <span style=\"color: green;\">/// &lt;param name=\"success\" type=\"Function\"&gt;Success callback with the requested items.&lt;/param&gt;</span>\r\n            <span style=\"color: green;\">/// &lt;param name=\"error\" type=\"Function\"&gt;Error callback.&lt;/param&gt;</span>\r\n            <span style=\"color: green;\">/// &lt;returns type=\"Object\"&gt;Request object with an abort method./&lt;param&gt;</span>\r\n    }\r\n}\r\n</pre>\n</div>\n<p>your custom data source can then query the uri that you need with the help of the OData functions, jquery, or any other mechanism you use to request the data from the endpoint.</p>\n<p>When you create your cache, you can pass this object as the source property of the options object:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>var cache = datajs.createDataCache({ <span style=\"color: #a31515;\">name: \"sessions\"</span>, <span style=\"color: red;\">source</span>: <span style=\"color: blue;\">myDataSource</span> }); </pre>\n</div>\n<p>As for getting the complete collection, doing&nbsp; cache.readRange(0, 0); should do the trick.</p>\n<p>Regards,</p>\n<p>Alex Trigo.</p>",
    "PostedDate": "2012-03-30T17:07:23.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]