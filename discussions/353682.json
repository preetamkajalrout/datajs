[
  {
    "Id": "828859",
    "ThreadId": "353682",
    "Html": "\r\n<p>Hi there,</p>\r\n<p>I am wondering how to influence the data.js parser in order to gain my targeted body I would like to send with a PUT request.<br>\r\nIn summary I would like to achive the following:<br>\r\n1) Set &quot;atom:&quot; in front of the tags &quot;entry&quot; and &quot;content&quot;<br>\r\n2) In the entry element, set additional properties like xml:base=&lt;service_document_uri&gt;<br>\r\n3) In the entry element, set xmlns<strong>:atom</strong>=&quot;http://www.w3.org/2005/Atom&quot; instead of xmlns=&quot;http://www.w3.org/2005/Atom&quot;<br>\r\n4) In the entry element, add a another entry: xmnls:xyz=&quot;my_uri&quot;<br>\r\n<br>\r\nHere is my current body output:<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;\r\n       xmlns:d=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices&quot;\r\n       xmlns:m=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/metadata&quot;&gt;\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">author</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">name</span><span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">author</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">title</span><span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">content</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;application/xml&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">m</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">properties</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Id</span><span style=\"color:blue\">&gt;</span>1-1<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Id</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Status</span><span style=\"color:blue\">&gt;</span>COMPLETED<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Status</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">m</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">properties</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">content</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">entry</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Here the target body structure I would like to create:<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>&lt;atom:entry xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; xmlns:d=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices&quot;\r\n            xmlns:m=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/metadata&quot;\r\n            xmlns:my_uri=&quot;http://www.myhost.com/mylink&quot;&gt;\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">atom</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">content</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;application/xml&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">m</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">properties</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Id</span><span style=\"color:blue\">&gt;</span>1-1<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Id</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Status</span><span style=\"color:blue\">&gt;</span>COMPLETED<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Status</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">m</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">properties</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">atom</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">content</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">atom</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">entry</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>If there is no standard way to achieve the above: Is there a way to construct the body entirely myself and pass it to the OData.request? I have tried it but could not figure out in which format it could work.</p>\r\n<p>Thanks a ton in advance.<br>\r\nJan</p>\r\n",
    "PostedDate": "2012-04-26T04:24:57.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829100",
    "ThreadId": "353682",
    "Html": "<p>After getting some help and debugging the data.js I would like to share my findings, hoping to narrow down the issue and to find a solution.</p>\r\n<p>in data.js (I am using data-1.0.2.js) I checked the request which is acutally sent --&gt; line 1070: xhr.send(request.body);<br />The request still fails and I do not understand why.</p>\r\n<p>The reason why I am baffled is when I copy the request and put it in a REST client (FF) the request actually gets processed (return code 204).<br />I made sure that the headers, body, uri and PUT request is identical.</p>\r\n<p>Any ideas?</p>",
    "PostedDate": "2012-04-26T14:25:37.8-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829132",
    "ThreadId": "353682",
    "Html": "<p>Hi JanKMR</p>\r\n<p>&nbsp;&nbsp;&nbsp; First things first, can you share a network trace of the request and response using datajs so I can debug it. Thanks for bringing that to our attention :).&nbsp; Now, on to the massaging of the payload.&nbsp; Datajs allows you to inject your own&nbsp;payload&nbsp;handler if you need to do very specific formatting of the payloads. A handler object is an object that adheres to this contract:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> myHandler = {  \r\n    read: <span style=\"color: blue;\">function</span> (response, context) {\r\n        <span style=\"color: green;\">/// &lt;summary&gt;Reads the body of the response and saves it to response.data.&lt;/summary&gt;</span>\r\n        <span style=\"color: green;\">/// &lt;param name=\"response\"&gt;Response object.&lt;/param&gt;</span>\r\n        <span style=\"color: green;\">/// &lt;param name=\"context\"&gt;Operation context.&lt;/param&gt;</span>\r\n        \r\n        response.data = doSomethingWithTheBody(response.body);\r\n    },\r\n\r\n    write: <span style=\"color: blue;\">function</span> (request, context) {\r\n        <span style=\"color: green;\">/// &lt;summary&gt;Write the body of the specified request from request.data.&lt;/summary&gt;</span>\r\n        <span style=\"color: green;\">/// &lt;param name=\"request\"&gt;Request object.&lt;/param&gt;</span>\r\n        <span style=\"color: green;\">/// &lt;param name=\"context\"&gt;Operation context.&lt;/param&gt;</span>\r\n        \r\n        response.body = doSomethingWithTheData(request.data);       \r\n     },</pre>\r\n<pre>    accept: <span style=\"color: #800000;\">\"application/atom+xml\"</span>,  <span style=\"color: #008000;\">// mime type that this handler accepts.</span></pre>\r\n<pre><span style=\"color: #000000;\">    maxDataServiceVersion: <span style=\"color: #800000;\">\"2.0\" <span style=\"color: #008000;\">// max version of the protocol supported by this handler.</span></span></span>\r\n};\r\n</pre>\r\n</div>\r\n<p>&nbsp; An then use it this way:&nbsp;&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>OData.request(requestObject, \r\n    <span style=\"color: blue;\">function</span>(data, response) { \r\n        <span style=\"color: green;\">// success function </span>\r\n    }, \r\n    <span style=\"color: blue;\">function</span>(err) { \r\n        <span style=\"color: green;\">//error function </span>\r\n    }, \r\n    OData.myHandler);\r\n</pre>\r\n</div>\r\n<p>&nbsp; Or make it the default handler altogether:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> oldDefaultHandler = OData.defaultHandler; <span style=\"color: green;\">//save it if it needs to be used later in the web app life.</span>\r\nOData.defaultHandler = myHandler;\r\n</pre>\r\n</div>\r\n<p>&nbsp; So you can create your own handler from the current atomHandler code (at least for the write function) that fine tunes the format as your scenario requires. You can also have your custom handler wrap the atomHandler itself and then fine tune the payload using some string transformations... Adding the atom: alias should be easy with&nbsp;string replace.&nbsp; Injecting&nbsp;custom nodes to the xml itself might be trickier as you would have to parse again the XML, modify the try and serliazle it back to a string.</p>\r\n<p>Regards,</p>\r\n<p>Alex Trigo.</p>",
    "PostedDate": "2012-04-26T16:46:24.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "831259",
    "ThreadId": "353682",
    "Html": "<p>Hi Alex,</p>\n<p>I found the issue. Your hint to provide a network trace let me find the issue.<br /> The issue was that data.js implicitely set DataServiceVersion = 1.0 which my ajax call did not. I guess the server only accepts version 2.0...<br /> Setting the request header to DataServiceVersion = 2.0 solved the issue. I will now do some more reading to understand the difference between 1.0 and 2.0 :)</p>\n<p>Thanks for you quick help which lead me to fixing the problem.</p>\n<p>Regards,<br /> Jan</p>",
    "PostedDate": "2012-05-02T11:39:40.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "831339",
    "ThreadId": "353682",
    "Html": "<p>Hi Jan,</p>\r\n<p>&nbsp;&nbsp;&nbsp; Good you solved your issue.&nbsp; The DataServiceVersion header indicates which version of the protocol the payload in the request / response adheres to.&nbsp; Datajs will infer the value&nbsp;it should use based on what it finds in the payload and the format being used.&nbsp; Do you know which server are you using?&nbsp;Was it configured to explicitly accept requests from&nbsp; V2 clients?</p>\r\n<p>Regards</p>\r\n<p>Alex Trigo.</p>",
    "PostedDate": "2012-05-02T14:30:59.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]