[
  {
    "Id": "615152",
    "ThreadId": "258225",
    "Html": "\r\n<p><span lang=\"EN-US\" style=\"color:black; font-size:10pt\">Hello all,</span></p>\r\n<p><span lang=\"EN-US\" style=\"color:black; font-size:10pt\">I was in the middle of evaluating datajs 0.0.3 when I stumbled onto this this problem: whenever I use the\r\n<strong>cache</strong> object (without the <strong>prefetching</strong> option set), each time I call the\r\n<strong>readRange </strong>function, the CPU usage rises on the client machine&nbsp;until it reaches 100% and stays there. This happens no matter what browser I use (IE9, Mozilla or Chrome).</span></p>\r\n<p><span lang=\"EN-US\" style=\"color:black; font-size:10pt\">The details:</span></p>\r\n<p><span lang=\"EN-US\" style=\"color:black; font-size:10pt\">On the server side, I created a WCF Data Service that looks like this:</span></p>\r\n<p></p>\r\n<p><span style=\"color:blue; font-size:9pt\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> DataService : DataService&lt;ODataContext&gt;\r\n{\r\n   <span style=\"color:green\">// This method is called only once to initialize service-wide policies.</span>\r\n   <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> InitializeService(DataServiceConfiguration config)\r\n   {\r\n       config.SetEntitySetAccessRule(<span style=\"color:#a31515\">&quot;Documents&quot;</span>, EntitySetRights.AllRead);\r\n       config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V2;\r\n   }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n</span><span lang=\"EN-US\" style=\"color:black; font-size:10pt\">The ODataContext class looks like this:</span>\r\n<p></p>\r\n<p></p>\r\n<p></p>\r\n<div><span style=\"color:blue; font-size:9pt\">\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ODataContext\r\n{\r\n   List&lt;Document2&gt; _docs;\r\n   <span style=\"color:blue\">public</span> IQueryable&lt;Document2&gt; Documents\r\n   {\r\n       <span style=\"color:blue\">get</span>\r\n       {\r\n           <span style=\"color:blue\">return</span> _docs.AsQueryable();\r\n       }\r\n   }\r\n   <span style=\"color:green\">//some other initialization code</span>\r\n}\r\n</pre>\r\n</div>\r\n</span></div>\r\n<p></p>\r\n<p><span style=\"color:blue; font-size:9pt\"></p>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p></p>\r\n<p>The Document2 class is a simple class that exposes two properties, <strong>ID </strong>\r\nand <strong>Name</strong>.</p>\r\n<p>On the client side, the HTML looks like this:</p>\r\n<p><span style=\"color:blue; font-size:9pt\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">div</span><span style=\"color:blue\">&gt;</span>\r\n     <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ul</span> <span style=\"color:red\">id</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;here&quot;</span><span style=\"color:blue\">&gt;</span>\r\n     <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ul</span><span style=\"color:blue\">&gt;</span>\r\n     <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">a</span> <span style=\"color:red\">href</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;#&quot;</span> <span style=\"color:red\">onclick</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;javascript:loadMoreData();&quot;</span><span style=\"color:blue\">&gt;</span>Next<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">a</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">div</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/x-jquerytemplate&quot;</span> <span style=\"color:red\">id</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;listTemplate&quot;</span><span style=\"color:blue\">&gt;</span>\r\n   &lt;li&gt;&lt;b&gt;ID: ${ID}&lt;/b&gt; - ${Name}&lt;/li&gt;\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\r\n \r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">language</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;javascript&quot;</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/javascript&quot;</span><span style=\"color:blue\">&gt;</span>\r\n     <span style=\"color:blue\">var</span> cache = datajs.createDataCache({\r\n       name: <span style=\"color:#a31515\">&quot;data&quot;</span>,\r\n       source: <span style=\"color:#a31515\">&quot;DataService.svc/Documents&quot;</span>,\r\n     });\r\n \r\n     <span style=\"color:blue\">var</span> index = 0;\r\n       \r\n     <span style=\"color:blue\">function</span> loadMoreData() {\r\n        cache.readRange(index, 10).then(<span style=\"color:blue\">function</span> (arr) {\r\n          $(<span style=\"color:#a31515\">&quot;#here&quot;</span>).empty();\r\n          index &#43;= 10;\r\n          $(<span style=\"color:#a31515\">&quot;#listTemplate&quot;</span>).tmpl(arr).appendTo(<span style=\"color:#a31515\">&quot;#here&quot;</span>);\r\n      });\r\n \r\n     }\r\n \r\n     loadMoreData();\r\n <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n&nbsp;As you see, pretty basic code. After some profiling, it turns out that the majority of the CPU time is spent in this anonymous function from datajs-0.0.3.js (line 4469):</span>\r\n<p></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"font-family:Consolas; color:#006400; font-size:x-small\"><span style=\"font-family:Consolas; color:#006400; font-size:x-small\"><span style=\"font-family:Consolas; color:#006400; font-size:x-small\"><p>// Hydrate using json</p></span></span></span></pre>\r\n<pre>value = window.JSON.parse(value, <span style=\"color:blue\">function</span> (k, v) {\r\n&hellip;\r\n});\r\n</pre>\r\n</div>\r\n</span>\r\n<p></p>\r\n<p>Am I doing something wrong? Did anyone else encounter this behavior ?</p>\r\n<p>Any help would be greatly appreciated.</p>\r\n<p>Radu</p>\r\n",
    "PostedDate": "2011-05-19T04:54:21.54-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "615429",
    "ThreadId": "258225",
    "Html": "<p>Hi Radu,</p>\r\n<p>I believe we had a bug in datajs 0.0.3 which caused some overzealous prefetching.&nbsp;Alex has checked in some pretty significant changes to the cache implementation&nbsp;since then. Could you try using the latest bits from <a title=\"changeset 7294\" href=\"http://datajs.codeplex.com/SourceControl/changeset/changes/7294\">change set 7294</a>&nbsp;and let us know if you still see the issue?</p>\r\n<p>-Beth</p>",
    "PostedDate": "2011-05-19T12:02:42.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "617171",
    "ThreadId": "258225",
    "Html": "<p>Hi Beth,</p>\r\n<p>The issue has been fixed&nbsp;in this change set.</p>\r\n<p>Thank you very much for your help.</p>\r\n<p>Radu</p>",
    "PostedDate": "2011-05-24T00:51:47.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]