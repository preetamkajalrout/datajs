[
  {
    "Id": "1144848",
    "ThreadId": "479376",
    "Html": "Hi, I have developed an application with VS2012 using Web API and OData.\r<br />\nThe client is a SPA HTML page with Javascript, JQuery, JSViews and DataJS.\r<br />\n<br />\nThe web page receives objects with this command: 'OData.read( _url, _callback, _callback);'\r<br />\nThe object contains links to properties that are composed of collections of objects, one Id and two strings.\r<br />\n<br />\nI want to update the Comment property which is a string but if I provide the complete object the call fails.\r<br />\nIf I create a temporary object with only the three properties, it works.\r<br />\n<br />\nTo perform my call, I use this command: <br />\n<pre><code>    OData.request(\n        request,\n        function (x, y, z) {\n            var s = &quot;success&quot;;\n        },\n        function (x, y, z) {\n            var s = &quot;failure&quot;;\n        }\n    );</code></pre>\n\nThe request object is: <br />\n<pre><code>    request = {\n        requestUri: _url,\n        method: &quot;PUT&quot;,\n        data: app\n    };</code></pre>\n\nHere is the definition of the two different 'app' objects I am using for tests :<br />\n<pre><code>    var app = {\n        &quot;Id&quot;:1,\n        &quot;Name&quot;:&quot;MyInventory5&quot;,\n        &quot;Comment&quot;:&quot;Test 1 for 1: MyInventory5&quot;\n    }</code></pre>\n\nor<br />\n<pre><code>    var app = {\n        &quot;__metadata&quot;:{\n            &quot;type&quot;:&quot;MyInventory2013.Models.Application&quot;,\n            &quot;properties&quot;:{\n                &quot;Id&quot;:{&quot;type&quot;:null},\n                &quot;Name&quot;:{&quot;type&quot;:null},\n                &quot;Comment&quot;:{&quot;type&quot;:null},\n                &quot;ApplicationContacts&quot;:{&quot;type&quot;:null},\n                &quot;ApplicationDivisions&quot;:{&quot;type&quot;:null},\n                &quot;Configs&quot;:{&quot;type&quot;:null},\n                &quot;Dependancies&quot;:{&quot;type&quot;:null},\n                &quot;Dependancies1&quot;:{&quot;type&quot;:null}\n            },\n            &quot;id&quot;:&quot;http://localhost:55431/odata/Applications(1)&quot;\n        },\n        &quot;Id&quot;:1,\n        &quot;Name&quot;:&quot;MyApp&quot;,\n        &quot;Comment&quot;:&quot;Comment for 1: MyApp&quot;,\n        &quot;ApplicationContacts&quot;:{\n            &quot;__deferred&quot;:{&quot;uri&quot;:&quot;http://localhost:55431/odata/Applications(1)/ApplicationContacts&quot;}\n        }\n    }</code></pre>\n\nOn server side, this C# function is called :<br />\n<pre><code>    protected override T UpdateEntity(int key, T update)</code></pre>\n\nUsing the small &quot;app&quot; sample, the &quot;update&quot; object is of the right type and the properties are ok \r<br />\nbut I'd prefer to receive the object from the service, update its Comment property and send it back for the update.\r<br />\n<br />\nUsing the large &quot;app&quot; sample, the &quot;update&quot; object is NULL on the server but I am able to find it using this code :<br />\n<pre><code>    if (update == null) {\n        if (HttpContext.Current.Request.InputStream.CanSeek) {\n            HttpContext.Current.Request.InputStream.Seek(0, System.IO.SeekOrigin.Begin);\n\n            using (System.IO.StreamReader reader = new System.IO.StreamReader(HttpContext.Current.Request.InputStream)) {\n                string content = reader.ReadToEnd();\n                update = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;T&gt;(content);\n            }\n        }\n    }</code></pre>\n\nBut, the DeserializeObject throws : <br />\n<pre><code>{\n    &quot;Cannot deserialize the current JSON object (e.g. {\\&quot;name\\&quot;:\\&quot;value\\&quot;}) \n    into type 'System.Collections.Generic.ICollection`1[MyInventory2013.Models.ApplicationContact]' \n    because the type requires a JSON array (e.g. [1,2,3]) to deserialize correctly. \n    To fix this error either change the JSON to a JSON array (e.g. [1,2,3]) \n    or change the deserialized type so that it is a normal .NET type \n    (e.g. not a primitive type like integer, not a collection type like an array or List&lt;T&gt;) \n    that can be deserialized from a JSON object. \n    JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object. \n    Path 'ApplicationContacts.__deferred'&quot;\n}\n</code></pre>\n\nI understand that it can't deserialize this property as it is not an array as expected but \r<br />\nI don't understand why it returns me data that I can't use for updates.\r<br />\n<br />\nCould you please help me to find the correct way to deal with this ?\r<br />\n<br />\nThank you, \r<br />\nClaude<br />\n",
    "PostedDate": "2014-01-02T16:15:30.27-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]